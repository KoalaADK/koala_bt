package pl.edu.agh.pros.bt.server;

import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import pl.edu.agh.pros.bt.server.blue.BluetoothManager;
import pl.edy.agh.pros.adk.util.ADKSendUtility;
import pl.edy.agh.pros.adk.util.KoalaCommands;
import pl.edy.agh.pros.adk.util.SpeedPreprocessor;
import android.app.Activity;
import android.app.PendingIntent;
import android.bluetooth.BluetoothAdapter;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.ParcelFileDescriptor;
import android.os.PowerManager;
import android.util.Log;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.TextView;
import android.widget.ToggleButton;

import com.android.future.usb.UsbAccessory;
import com.android.future.usb.UsbManager;

public class KoalaControllerServerActivity extends Activity implements Runnable {

	private static final String TAG = "KoalaControllerServerActivity";

	private static final String ACTION_USB_PERMISSION = "pl.edu.agh.pros.bt.server.KoalaControllerServerActivity.action.USB_PERMISSION";

	// ADK config
	private UsbManager mUsbManager;
	private PendingIntent mPermissionIntent;
	private boolean mPermissionRequestPending;
	private UsbAccessory mAccessory;
	private ParcelFileDescriptor mFileDescriptor;
	private FileInputStream mInputStream;
	private FileOutputStream mOutputStream;
	private ADKSendUtility sendUtility = new ADKSendUtility();

	private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if (ACTION_USB_PERMISSION.equals(action)) {
				synchronized (this) {
					UsbAccessory accessory = UsbManager.getAccessory(intent);
					if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
						openAccessory(accessory);
					} else {
						Log.d(TAG, "permission denied for accessory " + accessory);
					}
					mPermissionRequestPending = false;
				}
			} else if (UsbManager.ACTION_USB_ACCESSORY_DETACHED.equals(action)) {
				UsbAccessory accessory = UsbManager.getAccessory(intent);
				if (accessory != null && accessory.equals(mAccessory)) {
					closeAccessory();
				}
			}
		}
	};

	private static final int REQUEST_ENABLE_BT = 2;
	// Message types sent from the BluetoothManager Handler
	public static final int MESSAGE_STATE_CHANGE = 3;
	public static final int MESSAGE_READ = 4;
	public static final int MESSAGE_WRITE = 5;
	public static final int MESSAGE_DEVICE_NAME = 6;
	public static final int MESSAGE_TOAST = 7;

	// Key names received from the BluetoothManager Handler
	public static final String DEVICE_NAME = "device_name";
	public static final String TOAST = "toast";
	// Name of the connected device
	private String mConnectedDeviceName = null;

	private BluetoothAdapter mBluetoothAdapter;
	private BluetoothManager mBluetoothManager;
	private PowerManager.WakeLock wl;

	private TextView xView;
	private TextView yView;
	private TextView zView;

	private TextView connectionStatus;
	private ToggleButton toggleButton;

	// The Handler that gets information back from the BluetoothManager
	private final Handler bluetoothHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
				case MESSAGE_STATE_CHANGE :
					switch (msg.arg1) {
						case BluetoothManager.STATE_CONNECTED :
							setStatus(getString(R.string.title_connected_to, mConnectedDeviceName));
							break;
						case BluetoothManager.STATE_CONNECTING :
							setStatus(getString(R.string.title_connecting));
							break;
						case BluetoothManager.STATE_LISTEN :
						case BluetoothManager.STATE_NONE :
							setStatus(getString(R.string.title_not_connected));
							break;
					}
					break;
				case MESSAGE_READ :
					if (!toggleButton.isChecked()) {
						break;
					}
					byte[] readBuf = (byte[]) msg.obj;
					if (readBuf.length < 3) {
						Log.d(TAG, "Bad message received");
						break;
					}
					xView.setText(Integer.toString(readBuf[0]));
					yView.setText(Integer.toString(readBuf[1]));
					zView.setText(Integer.toString(readBuf[2]));

					sendUtility.sendMessage(KoalaCommands.TYPE_SPEED, SpeedPreprocessor.process(readBuf));

					break;
				case MESSAGE_DEVICE_NAME :
					// save the connected device's name
					mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
					break;
			}
		}

	};

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		xView = (TextView) findViewById(R.id.x);
		yView = (TextView) findViewById(R.id.y);
		zView = (TextView) findViewById(R.id.z);
		connectionStatus = (TextView) findViewById(R.id.connectionStatus);
		toggleButton = (ToggleButton) findViewById(R.id.toggleRobot);
		toggleButton.setOnCheckedChangeListener(new OnCheckedChangeListener() {
			@Override
			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
				if (isChecked) {
					ensureDiscoverable();
					mBluetoothManager.start();
				} else {
					sendUtility.sendMessage(KoalaCommands.TYPE_SPEED,
							KoalaCommands.prepareSpeedCommand((byte) 0, (byte) 0));
				}
			}
		});

		// Get local Bluetooth adapter
		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

		// If the adapter is null, then Bluetooth is not supported
		if (mBluetoothAdapter == null) {
			finish();
			return;
		}

		// Prepare ADK
		mUsbManager = UsbManager.getInstance(this);
		mPermissionIntent = PendingIntent.getBroadcast(this, 0, new Intent(ACTION_USB_PERMISSION), 0);
		IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);
		filter.addAction(UsbManager.ACTION_USB_ACCESSORY_DETACHED);
		registerReceiver(mUsbReceiver, filter);

		if (getLastNonConfigurationInstance() != null) {
			mAccessory = (UsbAccessory) getLastNonConfigurationInstance();
			openAccessory(mAccessory);
		}

		// Getting a WakeLock. This insures that the phone does not sleep
		// while driving the robot.
		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		wl = pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK, "My Tag");
		wl.acquire();
	}

	@Override
	public void onStart() {
		super.onStart();

		// If BT is not on, request that it be enabled.
		// setupChat() will then be called during onActivityResult
		if (!mBluetoothAdapter.isEnabled()) {
			Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			startActivityForResult(enableIntent, REQUEST_ENABLE_BT);
			// Otherwise, setup the chat session
		} else {
			mBluetoothManager = new BluetoothManager(this, bluetoothHandler);
		}
	}

	@Override
	public Object onRetainNonConfigurationInstance() {
		if (mAccessory != null) {
			return mAccessory;
		} else {
			return super.onRetainNonConfigurationInstance();
		}
	}

	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		switch (requestCode) {
			case REQUEST_ENABLE_BT :
				// When the request to enable Bluetooth returns
				if (resultCode == Activity.RESULT_OK) {
					mBluetoothManager = new BluetoothManager(this, bluetoothHandler);
				} else {
					// User did not enable Bluetooth or an error occurred
					finish();
				}
		}
	}

	@Override
	protected void onResume() {
		super.onResume();

		if (mBluetoothManager != null) {
			// Only if the state is STATE_NONE, do we know that we haven't
			// started already
			if (mBluetoothManager.getState() == BluetoothManager.STATE_NONE) {
				// Start the Bluetooth services
				mBluetoothManager.start();
			}
		}

		UsbAccessory[] accessories = mUsbManager.getAccessoryList();
		UsbAccessory accessory = (accessories == null ? null : accessories[0]);
		if (accessory != null) {
			if (mUsbManager.hasPermission(accessory)) {
				openAccessory(accessory);
			} else {
				synchronized (mUsbReceiver) {
					if (!mPermissionRequestPending) {
						mUsbManager.requestPermission(accessory, mPermissionIntent);
						mPermissionRequestPending = true;
					}
				}
			}
		} else {
			Log.d(TAG, "mAccessory is null");
		}

	}

	@Override
	public void onPause() {
		super.onPause();
		closeAccessory();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		unregisterReceiver(mUsbReceiver);
		wl.release();
	}

	private void openAccessory(UsbAccessory accessory) {
		mFileDescriptor = mUsbManager.openAccessory(accessory);
		if (mFileDescriptor != null) {
			mAccessory = accessory;
			FileDescriptor fd = mFileDescriptor.getFileDescriptor();
			mInputStream = new FileInputStream(fd);
			mOutputStream = new FileOutputStream(fd);
			Thread thread = new Thread(null, this, "KoalaController");
			thread.start();
			sendUtility.setOutputStream(mOutputStream);
			Log.d(TAG, "accessory opened");
		} else {
			Log.d(TAG, "accessory open fail");
		}
	}

	private void closeAccessory() {
		try {
			if (mFileDescriptor != null) {
				mFileDescriptor.close();
			}
		} catch (IOException e) {
		} finally {
			mFileDescriptor = null;
			mAccessory = null;
		}
	}

	private void ensureDiscoverable() {
		if (mBluetoothAdapter.getScanMode() != BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {
			Intent discoverableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
			discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);
			startActivity(discoverableIntent);
		}
	}

	private void setStatus(String status) {
		connectionStatus.setText(status);
	}

	private void sendMessageBT(byte[] message) {
		if (mBluetoothManager == null) {
			return;
		}
		// Check that we're actually connected before trying anything
		if (mBluetoothManager.getState() != BluetoothManager.STATE_CONNECTED) {
			return;
		}

		// Check that there's actually something to send
		if (message.length > 0) {
			// Get the message bytes and tell the BluetoothManager to write
			mBluetoothManager.write(message);
		}
	}

	@Override
	public void run() {
		int responseLength = 0;
		byte[] buffer = new byte[1024];

		while (true) { // read data
			String value = "100,200,300,400,500,600,700,800,100,200,300,400,500,600,700,800";
			sendMessageBT(value.getBytes());
			Thread.sleep(5000);
			value = "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
			sendMessageBT(value.getBytes());
//			try {
//				responseLength = mInputStream.read(buffer);
//			} catch (IOException e) {
//				openAccessory(mAccessory);
//				break;
//			}
//
//			if (responseLength > 1) {
//				byte flag = buffer[0];
//				if (flag == 'n') {
//					String value = String.valueOf(new String(buffer).toCharArray(), 1, responseLength - 3);
//					sendMessageBT(value.getBytes());
//				}
//			}
		}
	}

}